from aiogram import Dispatcher, filters, types
from aiogram.utils.exceptions import BotKicked, MessageCantBeDeleted

from config import ADMINS_ID, bot, ex1
from data_base.groups_activity_db import sql_read_data_groups_activity_db
from data_base.users_activity_db import sql_add_data_users_activity_db
from services import *
from services import get_datetime_now
from tm_botbot.keyboards.client_kb import client_kb


async def add_base_action(message: types.Message, content=None) -> None:
    '''–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —Ç–∞–±–ª–∏—Ü—É –ë–î.'''
    if str(message.from_user.id) not in ADMINS_ID:
        sql_add_data_users_activity_db(
            ex1.connect,
            str(message.from_user.id),
            content,
            message.from_user.first_name,
            message.from_user.username,
            get_datetime_now()
        )


async def command_start(message: types.Message):
    '''–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.'''
    await bot.send_photo(
        message.from_user.id,
        types.InputFile(str(Path("./content/images/pic_start.jpg"))),
        caption=f"<b>{message.from_user.first_name.title()}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å!</b>\n\n{get_message_start()}",
        reply_markup=client_kb,
        parse_mode="HTML"
    )
    await message.delete()
    await add_base_action(message, message.text)


async def command_price(message: types.Message):
    '''–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ü–µ–Ω–∞–º–∏.'''
    await bot.send_photo(
        message.from_user.id,
        types.InputFile(str(Path("./content/images/pic_price.png"))),
        reply_markup=client_kb,
        disable_notification=True,
        caption="<b>üìÑ –£–°–õ–£–ì–ò –ò –¶–ï–ù–´</b>",
        parse_mode="HTML"
    )
    await message.delete()
    await add_base_action(message, message.text)


async def command_contacts(message: types.Message):
    '''–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —é—Ä–∏—Å—Ç–æ–≤.'''
    await bot.send_message(
        message.from_user.id,
        get_contacts_message(),
        reply_markup=client_kb,
        parse_mode="HTML"
    )
    await message.delete()
    await add_base_action(message, message.text)


async def command_us(message: types.Message):
    '''–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏.'''
    await message.delete()
    await message.answer_document(
        types.InputFile(str(Path("./content/images/–æ_–Ω–∞—Å.png"))),
        caption="‚òëÔ∏è –û –ù–ê–°. –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´",
        disable_notification=True,
        reply_markup=client_kb
    )
    await add_base_action(message, message.text)


async def command_consultation(message: types.message):
    '''–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç.'''
    try:
        # –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ —á—Ç–æ –º—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –±–æ—Ç—É –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message.reply_to_message["from"]["is_bot"] == True
    except TypeError:
        _id = message.from_user.id
        try:
            await message.delete()
        except MessageCantBeDeleted as error:
            print(f"–û—à–∏–±–∫–∞ –≤ command_consultation - {error}, {get_datetime_now()}, ID-{_id} {message.text}")

        user_id = str(message.from_user.id)
        chat_url = None

        if sql_read_data_groups_activity_db(ex1.connect, user_id):
            chat_url = sql_read_data_groups_activity_db(ex1.connect, user_id)[-3]
        else:
            user_info = str(message.from_user.id), message.from_user.first_name, message.from_user.username
            await bot.send_message(ADMINS_ID['KONSTANTIN'], f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è_c_ID {user_info}")
            while not chat_url:
                if sql_read_data_groups_activity_db(ex1.connect, user_id):
                    chat_url = sql_read_data_groups_activity_db(ex1.connect, user_id)[-3]

        chat_id = sql_read_data_groups_activity_db(ex1.connect, user_id)[3]
        user_firstname = message.from_user.first_name
        await bot.send_message(
            message.from_user.id,
            "<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é—Ä–∏—Å—Ç–∞–º. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ - '–û–¢–ö–†–´–¢–¨ –ì–†–£–ü–ü–£' ‚¨áÔ∏è</b>",
            reply_markup=client_kb
        )
        content = None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.content_type == "text":
            await bot.send_message(
                chat_id,
                f"<b>{user_firstname} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n'{message.text}'",
                parse_mode="HTML"
            )
            content = f"–û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç - {message.text}"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.content_type == "voice":
            await bot.send_message(
                chat_id,
                f"<b>{user_firstname} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∑–≤—É–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>",
                parse_mode="HTML"
            )
            await bot.send_voice(
                chat_id,
                message.voice.file_id
            )
            content = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–≤—É–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.content_type == "photo":
            await bot.send_message(
                chat_id,
                f"<b>{user_firstname} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∫–∞—Ä—Ç–∏–Ω–∫—É:</b>",
                parse_mode="HTML"
            )
            await bot.send_photo(
                chat_id,
                message.photo[-1].file_id,
                caption=message.caption
            )
            content = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.content_type == "document":
            await bot.send_message(
                chat_id,
                f"<b>{user_firstname} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Ñ–∞–π–ª:</b>",
                parse_mode="HTML"
            )
            await bot.send_document(
                chat_id,
                message.document.file_id,
                caption=message.caption
            )
            content = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç"

        await message.answer(chat_url, reply_markup=client_kb)
        await add_base_action(message, content)


async def delete_content_commands(message: types.Message):
    "–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤–µ—Å—å –Ω–µ–Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."
    if str(message.from_user.id) not in ADMINS_ID and message.content_type not in \
            ('new_chat_members', 'left_chat_member'):
        user_id = message.from_user.id
        try:
            await message.delete()
        # –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∏, –∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–∫–ª—é—á–∞—Ç—å
        except (MessageCantBeDeleted, BotKicked) as error:
            print(f"delete_content_commands - {error}, {get_datetime_now()}, ID-{user_id}, {message.content_type}")
        finally:
            await add_base_action(message, message.content_type)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, filters.Text(equals="/start"))
    dp.register_message_handler(command_us, filters.Text(equals="‚òëÔ∏è –û –ù–ê–°. –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´"))
    dp.register_message_handler(command_price, filters.Text(equals="üìÑ –£–°–õ–£–ì–ò –ò –¶–ï–ù–´"))
    dp.register_message_handler(command_contacts, filters.Text(equals="‚òéÔ∏è –ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´"))
    dp.register_message_handler(command_consultation,
                                content_types=[types.ContentType.TEXT, types.ContentType.VOICE,
                                               types.ContentType.PHOTO, types.ContentType.DOCUMENT])
    dp.register_message_handler(delete_content_commands, content_types=types.ContentType.ANY)
